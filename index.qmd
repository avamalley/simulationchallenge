---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
execute:
  echo: false
  eval: true
  python:
    reticulate: false
---

# ðŸŽ² Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

---

# Your Analysis

## Question 1: Expected Value Analysis

*Calculate the expected value of your account balance after 1 coin flip.*

```{r}
#| label: expected-value
#| echo: false

# Set seed for reproducibility
set.seed(123)

# Initial balance
initial_balance <- 1000

# Expected value calculation
# Heads (50% chance): balance * 1.5
# Tails (50% chance): balance * 0.6
expected_value <- 0.5 * (initial_balance * 1.5) + 0.5 * (initial_balance * 0.6)

cat("Expected value after 1 coin flip: $", expected_value, "\n", sep = "")
cat("Expected return: ", ((expected_value - initial_balance) / initial_balance) * 100, "%\n", sep = "")
```

## Question 2: Expectation vs. Reality

*Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000?*

**Analysis:** The expected value is **positive** at $1,050, representing a 5% expected return. Based on this calculation, I would expect my account to be worth **more** than $1,000 after one coin flip.

**Mathematical Reasoning:**
- Heads (50% probability): $1,000 Ã— 1.5 = $1,500
- Tails (50% probability): $1,000 Ã— 0.6 = $600
- Expected Value = (0.5 Ã— $1,500) + (0.5 Ã— $600) = $750 + $300 = $1,050
- Expected Return = ($1,050 - $1,000) / $1,000 = 5%

## Question 3: Single Simulation

*Run one simulation showing account balance over time.*

```{r}
#| label: single-simulation
#| echo: false

# Set seed for reproducibility
set.seed(456)

# Parameters
initial_balance <- 1000
n_periods <- 35  # From age 20 to 55 (35 years)
current_age <- 20

# Simulate one path
simulate_investment_path <- function(initial, periods) {
  balance <- initial
  path <- numeric(periods + 1)
  path[1] <- initial
  
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5  # 50% gain
    } else {
      balance <- balance * 0.6  # 40% loss
    }
    path[i + 1] <- balance
  }
  
  return(path)
}

# Run simulation
investment_data <- data.frame(
  age = current_age:(current_age + n_periods),
  balance = simulate_investment_path(initial_balance, n_periods)
)

# Create time series plot
plot(investment_data$age, investment_data$balance, 
     type = "b", col = "darkgreen", lwd = 2, pch = 19,
     main = "Investment Account Balance Over Time\nSingle Simulation Path",
     xlab = "Age", ylab = "Account Balance ($)",
     ylim = c(0, max(investment_data$balance) * 1.1))
abline(h = initial_balance, col = "red", lty = 2, lwd = 2)
legend("topleft", c("Account Balance", "Initial Balance"), 
       col = c("darkgreen", "red"), lty = c(1, 2), lwd = 2)
grid()

# Show final balance
final_balance <- investment_data$balance[nrow(investment_data)]
cat("Final balance at age 55: $", round(final_balance, 2), "\n", sep = "")
cat("Total return: ", round(((final_balance - initial_balance) / initial_balance) * 100, 1), "%\n", sep = "")
```

**Comment on Results:** Even though the expected return is +5%, this run ends at $625.39 (~37.5%). Because each flip changes the next balance, early losses are hard to recover, so the order of flips matters more than the average.

## Question 4: Multiple Simulations

*Run 100 simulations and create a probability distribution plot.*

```{r}
#| label: multiple-simulations
#| echo: false

# Set seed for reproducibility
set.seed(789)

# Parameters
initial_balance <- 1000
n_periods <- 35  # 35 years
n_sims <- 100

# Simulate final balance for multiple paths
simulate_final_balance <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5  # 50% gain
    } else {
      balance <- balance * 0.6  # 40% loss
    }
  }
  return(balance)
}

# Run multiple simulations
final_balances <- replicate(n_sims, simulate_final_balance(initial_balance, n_periods))

# Create data frame
distribution_data <- data.frame(
  sim_num = 1:n_sims,
  final_balance = final_balances
)

# Create histogram
hist(distribution_data$final_balance, 
     breaks = 20, 
     col = "lightblue", 
     border = "black",
     main = "Distribution of Final Account Balances\n100 Simulations, 35 Years Each",
     xlab = "Final Balance at Age 55 ($)",
     ylab = "Frequency")
abline(v = initial_balance, col = "red", lty = 2, lwd = 2)
legend("topright", "Initial Balance", col = "red", lty = 2, lwd = 2)

# Summary statistics
mean_balance <- mean(distribution_data$final_balance)
median_balance <- median(distribution_data$final_balance)
prob_above_initial <- mean(distribution_data$final_balance > initial_balance)

cat("Summary Statistics:\n")
cat("Mean final balance: $", round(mean_balance, 2), "\n", sep = "")
cat("Median final balance: $", round(median_balance, 2), "\n", sep = "")
cat("Probability above initial: ", round(prob_above_initial, 3), "\n", sep = "")
```

**Comment on Results:** Most runs lose money even though the average looks high. In 100 simulations, only 29% finish above $1,000, and the median is about $250. A few big wins raise the mean, but the typical result is a loss.

## Question 5: Probability Analysis

*What is the probability that your account balance will be greater than $1,000 at age 55?*

```{r}
#| label: probability-analysis
#| echo: false

# Calculate probability from the 100 simulations above
prob_above_1000 <- mean(distribution_data$final_balance > 1000)

cat("Probability of having more than $1,000 at age 55: ", 
    round(prob_above_1000 * 100, 1), "%\n", sep = "")
cat("This means ", round((1 - prob_above_1000) * 100, 1), 
    "% of the time, you end up with less than your initial investment.\n", sep = "")

# Additional analysis: probability of different outcomes
prob_above_5000 <- mean(distribution_data$final_balance > 5000)
prob_above_10000 <- mean(distribution_data$final_balance > 10000)
prob_below_500 <- mean(distribution_data$final_balance < 500)

cat("\nAdditional Probability Analysis:\n")
cat("Probability above $5,000: ", round(prob_above_5000 * 100, 1), "%\n", sep = "")
cat("Probability above $10,000: ", round(prob_above_10000 * 100, 1), "%\n", sep = "")
cat("Probability below $500: ", round(prob_below_500 * 100, 1), "%\n", sep = "")
```

**Analysis:** Only 29% of runs finish above $1,000, so 71% are below. About 9% beat $5,000, 4% beat $10,000, and 63% end under $500. So even with a positive expected return, most outcomes lose money.

## Question 6: Strategy Comparison

*Run 100 simulations for the modified strategy and compare probabilities.*

### Modified Strategy Description
In the modified strategy, you must bet exactly 50% of your current account balance on each flip. If heads, you gain 50% on your bet; if tails, you lose 40% on your bet.

```{r}
#| label: strategy-comparison
#| echo: false

# Set seed for reproducibility
set.seed(101)

# Modified strategy: bet exactly 50% of balance each round
simulate_modified_strategy <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    bet_amount <- balance * 0.5  # Bet exactly 50%
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance + (bet_amount * 0.5)  # 50% gain on bet
    } else {
      balance <- balance - (bet_amount * 0.4)  # 40% loss on bet
    }
  }
  return(balance)
}

# Run 100 simulations for modified strategy
modified_final_balances <- replicate(n_sims, simulate_modified_strategy(initial_balance, n_periods))

# Calculate probabilities for modified strategy
prob_modified_above_1000 <- mean(modified_final_balances > 1000)
prob_modified_above_10000 <- mean(modified_final_balances > 10000)

# Compare with original strategy
prob_original_above_1000 <- mean(final_balances > 1000)
prob_original_above_10000 <- mean(final_balances > 10000)

cat("Strategy Comparison Results:\n")
cat("Original strategy - Probability > $1,000: ", 
    round(prob_original_above_1000 * 100, 1), "%\n", sep = "")
cat("Modified strategy - Probability > $1,000: ", 
    round(prob_modified_above_1000 * 100, 1), "%\n", sep = "")
cat("\nOriginal strategy - Probability > $10,000: ", 
    round(prob_original_above_10000 * 100, 1), "%\n", sep = "")
cat("Modified strategy - Probability > $10,000: ", 
    round(prob_modified_above_10000 * 100, 1), "%\n", sep = "")

# Create comparison plot
par(mfrow = c(1, 2))
hist(final_balances, breaks = 15, col = "lightblue", border = "black",
     main = "Original Strategy\nFinal Balances", xlab = "Final Balance ($)")
hist(modified_final_balances, breaks = 15, col = "lightcoral", border = "black",
     main = "Modified Strategy\nFinal Balances", xlab = "Final Balance ($)")
par(mfrow = c(1, 1))

# Summary statistics comparison
cat("\nSummary Statistics Comparison:\n")
cat("Original - Mean: $", round(mean(final_balances), 2), 
    ", Median: $", round(median(final_balances), 2), "\n", sep = "")
cat("Modified - Mean: $", round(mean(modified_final_balances), 2), 
    ", Median: $", round(median(modified_final_balances), 2), "\n", sep = "")
```

**Analysis:** The modified strategy is steadier: about 47% end above $1,000 vs 29% for the original. But itâ€™s less likely to hit huge wins ($10,000+: 4% vs 5%). In short, it trades big upside for better odds of a decent result.

---


